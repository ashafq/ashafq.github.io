<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ayan Shafqat - Programming</title><link href="https://shafq.at/" rel="alternate"></link><link href="https://shafq.at/feeds/programming.atom.xml" rel="self"></link><id>https://shafq.at/</id><updated>2025-07-21T00:00:00-04:00</updated><subtitle>My personal website</subtitle><entry><title>My GPU Fan Saga</title><link href="https://shafq.at/my-gpu-fan-saga.html" rel="alternate"></link><published>2025-07-21T00:00:00-04:00</published><updated>2025-07-21T00:00:00-04:00</updated><author><name>Ayan Shafqat</name></author><id>tag:shafq.at,2025-07-21:/my-gpu-fan-saga.html</id><summary type="html">&lt;p&gt;Having a problem-solving mindset is incredibly valuable and rewarding, especially when it leads to exciting DIY adventures. My latest experience with a noisy GPU fan turned into just such an opportunity. It guided me through fascinating explorations involving ATX power, MOSFET motor drivers, Pulse Width Modulation (PWM), ATTiny85's bit-banged 1-wire …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having a problem-solving mindset is incredibly valuable and rewarding, especially when it leads to exciting DIY adventures. My latest experience with a noisy GPU fan turned into just such an opportunity. It guided me through fascinating explorations involving ATX power, MOSFET motor drivers, Pulse Width Modulation (PWM), ATTiny85's bit-banged 1-wire bus, and a DS18B20 temperature sensor. While many ready-made solutions exists, this project provided me with invaluable learning and immense satisfaction. 😊&lt;/p&gt;
&lt;p&gt;&lt;img src="https://codeberg.org/Colahall/tiny85fancontrol/media/branch/main/schematic/info/tiny85fancontrol.png" alt="Tiny85 Fan Controller PCB 3D previes" width=500px&gt;&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The GPU in question isn't particularly high-end, nor is the use case too demanding. I use this &lt;a href="https://visiontek.com/products/radeon-rx-550-sff-4gb-gddr5-4m-graphics-card-4x-mdp"&gt;VisionTek Radeon RX 550 SFF GDDR5 &lt;/a&gt; mainly because it supports Wayland on Linux. Nvidia, on the other hand, has great support for Linux, only if you're running CUDA. So, my setup has been to use Nvidia for CUDA/ML related tasks and AMD for Wayland. But last winter, my AMD graphics card decided to annoy me with a high-pitched whine, a clear sign that the fan was nearing its end. To prevent further damage (or perhaps just out of sheer annoyance), I swiftly snipped the fan's power cable. Silence returned, and through the cold months, the GPU seemed perfectly fine without active cooling.&lt;/p&gt;
&lt;p&gt;That blissful silence lasted until May. With rising temperatures, my GPU began to complain again, this time visually. The screen started having episodes of random flickers and periodic blackouts. At idle, the GPU temperature hovered around 80 °C, clearly unhealthy no matter how modest its workload. It was obvious that a solution was needed, preferably one that wouldn't break the bank.&lt;/p&gt;
&lt;h2&gt;Solution Part 1: Using an Old Fan&lt;/h2&gt;
&lt;p&gt;Being a long-time tinkerer, I typically have random spare parts lying around. Among these was a small 12V DC brushless fan from a past project. Unfortunately, the connectors didn't match. Undeterred, I stripped a spare Molex connector and wired it up. If you're curious, Wikipedia offers great documentation on &lt;a href="https://en.wikipedia.org/wiki/Molex_connector"&gt;Molex connectors&lt;/a&gt; pinout and I have confirmed them with my own measurements as well. Here is a quick reference on the pinout:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Color&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pin 1&lt;/td&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;td&gt;+12 V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pin 2&lt;/td&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pin 3&lt;/td&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pin 4&lt;/td&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;td&gt;+5 V&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I mounted the fan onto the GPU with some double-sided tape, right under the defunct fan. Initially, it seemed perfect: the GPU temperature dropped significantly; hovering around 40 °C even under load. But a new issue emerged: the fan ran at full speed constantly, turning my workspace from a serene environment back into a slightly noisier one.&lt;/p&gt;
&lt;h2&gt;Solution Part 2: Pulse Width Modulation (PWM)&lt;/h2&gt;
&lt;p&gt;PWM is used everywhere. From dimming LED lights and creating powerful yet efficient audio amplifiers to voltage regulation for large power convertors. It's a very simple concept build on many complex ideas. Sure, I could have powered the fan from the 5V rail of the Molex connector, but this brought two issues: first, the fan required a higher voltage to initially start spinning; second, even if it did run at 5V, the speed might be insufficient to keep the GPU cool enough.&lt;/p&gt;
&lt;p&gt;There are many ways to generate a PWM signal. In analog world, it can be achieved with a &lt;a href="https://en.wikipedia.org/wiki/555_timer_IC"&gt;555 timer IC&lt;/a&gt;. But, I had my eyes set for a more complex approach, which is by using a cheap microcontroller. Luckily, I have a bunch of &lt;a href="https://www.microchip.com/en-us/product/ATtiny85"&gt;ATtiny85&lt;/a&gt; laying around ready to be used. Using a microcontroller allows us to add a bit of logic to the PWM, which we will explore in the next section. PWM can be generated by using timer registers on the ATtiny, and can be explored in the code on &lt;a href="https://github.com/Colahall/tiny85fancontrol/blob/main/src/pwm.c#L32"&gt;Github&lt;/a&gt; or &lt;a href="https://codeberg.org/Colahall/tiny85fancontrol/src/branch/main/src/pwm.c#L32"&gt;Codeberg&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Solution Part 3: Automatically Adjust Fan Speed Based on Temperature&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.analog.com/en/products/ds18b20.html"&gt;DS18B20&lt;/a&gt; may seem like a mouthful, nor does it roll of the tongue easily. However, with enough practice, we can recite these characters, which incidentally look like a solid low-entropy password. Jokes aside, this is one of the most widely-used temperature sensors in hobby electronics, commonly included in many beginner electronics kits. I also just happen to have a few of these in my parts bin.&lt;/p&gt;
&lt;p&gt;The DS18B20 sensor communicates using the &lt;a href="https://en.wikipedia.org/wiki/1-Wire"&gt;1-Wire&lt;/a&gt; bus protocol, which is somewhat similar, in principle, to the &lt;a href="https://en.wikipedia.org/wiki/LED_strip_light"&gt;WS2812&lt;/a&gt; (another tongue-twister!) addressable RGB LEDs, albeit slightly more complicated. While the 1-Wire bus resembles &lt;a href="https://en.wikipedia.org/wiki/I2C"&gt;I²C&lt;/a&gt;, it has its own unique quirks. Plenty of excellent tutorials cover the nuances of interfacing with DS18B20, so I’ll leave the detailed exploration of the protocol as an exercise for interested readers. In my case, I mostly mashed the keyboard until I started receiving accurate temperature readings.&lt;/p&gt;
&lt;p&gt;For a detailed explanation of the temperature sensor, please check the data sheet of &lt;a href="https://www.analog.com/en/products/ds18b20.html"&gt;DS18B20&lt;/a&gt;. Also, there are other temperature sensors out there that uses simpler protocols, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTU31&lt;/strong&gt;: Measures both temperature and humidity via &lt;strong&gt;I²C&lt;/strong&gt;. &lt;a href="https://www.te.com/usa-en/product-10142048-20.datasheet.pdf"&gt;Datasheet&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BME688&lt;/strong&gt;: Provides temperature, humidity, barometric pressure, and gas sensing (e.g., carbon monoxide) also via &lt;strong&gt;I²C&lt;/strong&gt;. &lt;a href="https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme688-ds000.pdf"&gt;Datasheet&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TMP35/36/37&lt;/strong&gt;: Simplest analog sensors, easily read with an Analog-to-Digital Converter (ADC). &lt;a href="https://www.analog.com/media/en/technical-documentation/data-sheets/TMP35_36_37.pdf"&gt;Datasheet&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;No fancy graphs, just vibes. &lt;strong&gt;Solution Part 1&lt;/strong&gt; (manual fan replacement) immediately eliminated flickers, lowering the GPU’s idle temperature to around &lt;strong&gt;35 °C&lt;/strong&gt; and peak load temperature to &lt;strong&gt;40 °C&lt;/strong&gt;. The downside: the fan ran at full blast continuously, creating noticeable noise.&lt;/p&gt;
&lt;p&gt;With the introduction of temperature-based PWM control (&lt;strong&gt;Solution Part 2 &amp;amp; 3&lt;/strong&gt;), idle temperatures settled around &lt;strong&gt;40 °C&lt;/strong&gt;, with peaks near &lt;strong&gt;60 °C&lt;/strong&gt; under sustained heavy load, well within safe operating limits. Crucially, the fan now remains whisper‑quiet at typical room temperatures, ramping up speed only when required.&lt;/p&gt;
&lt;h2&gt;Costs&lt;/h2&gt;
&lt;p&gt;While my time investment was significant, the &lt;em&gt;material&lt;/em&gt; costs remain modest when parts are ordered in bulk. Here’s a breakdown of the bill of materials:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Qty&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Unit Cost (10 pcs)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Unit Cost (100 pcs)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Footprint&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Datasheet&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.1 µF&lt;/td&gt;
&lt;td&gt;&amp;#36;0.10&lt;/td&gt;
&lt;td&gt;&amp;#36;0.07&lt;/td&gt;
&lt;td&gt;Capacitor_THT:CP_Radial_D4.0mm_P2.00mm&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1N4001&lt;/td&gt;
&lt;td&gt;&amp;#36;0.07&lt;/td&gt;
&lt;td&gt;&amp;#36;0.05&lt;/td&gt;
&lt;td&gt;Diode_THT:D_DO-41_SOD81_P10.16mm_Horizontal&lt;/td&gt;
&lt;td&gt;http://www.vishay.com/docs/88503/1n4001.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;UART_DBG&lt;/td&gt;
&lt;td&gt;&amp;#36;0.50&lt;/td&gt;
&lt;td&gt;&amp;#36;0.10&lt;/td&gt;
&lt;td&gt;Connector_PinHeader_2.54mm:PinHeader_1x02_P2.54mm_Vertical&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Molex&lt;/td&gt;
&lt;td&gt;&amp;#36;1.00&lt;/td&gt;
&lt;td&gt;&amp;#36;0.20&lt;/td&gt;
&lt;td&gt;Connector_Molex:Molex_KK-254_AE-6410-04A_1x04_P2.54mm_Vertical&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Fan Connector&lt;/td&gt;
&lt;td&gt;&amp;#36;5.00&lt;/td&gt;
&lt;td&gt;&amp;#36;2.00&lt;/td&gt;
&lt;td&gt;Connector_PinHeader_2.54mm:PinHeader_1x02_P2.54mm_Vertical&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Q1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;IRF3808&lt;/td&gt;
&lt;td&gt;&amp;#36;1.59&lt;/td&gt;
&lt;td&gt;&amp;#36;1.00&lt;/td&gt;
&lt;td&gt;Package_TO_SOT_THT:TO-220-3_Vertical&lt;/td&gt;
&lt;td&gt;http://www.irf.com/product-info/datasheets/data/irf3205.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10 kΩ&lt;/td&gt;
&lt;td&gt;&amp;#36;0.02&lt;/td&gt;
&lt;td&gt;&amp;#36;0.01&lt;/td&gt;
&lt;td&gt;Resistor_THT:R_Axial_DIN0204_L3.6mm_D1.6mm_P1.90mm_Vertical&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100 Ω&lt;/td&gt;
&lt;td&gt;&amp;#36;0.36&lt;/td&gt;
&lt;td&gt;&amp;#36;0.25&lt;/td&gt;
&lt;td&gt;Resistor_THT:R_Axial_DIN0204_L3.6mm_D1.6mm_P1.90mm_Vertical&lt;/td&gt;
&lt;td&gt;Can be short to save that money&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4.7 kΩ&lt;/td&gt;
&lt;td&gt;&amp;#36;0.05&lt;/td&gt;
&lt;td&gt;&amp;#36;0.02&lt;/td&gt;
&lt;td&gt;Resistor_THT:R_Axial_DIN0204_L3.6mm_D1.6mm_P1.90mm_Vertical&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;U1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;ATtiny85-20P&lt;/td&gt;
&lt;td&gt;&amp;#36;1.66&lt;/td&gt;
&lt;td&gt;&amp;#36;1.50&lt;/td&gt;
&lt;td&gt;Package_DIP:DIP-8_W7.62mm&lt;/td&gt;
&lt;td&gt;http://ww1.microchip.com/downloads/en/DeviceDoc/atmel-2586-avr-8-bit-microcontroller-attiny25-attiny45-attiny85_datasheet.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;U2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;DS18B20&lt;/td&gt;
&lt;td&gt;&amp;#36;5.70&lt;/td&gt;
&lt;td&gt;&amp;#36;1.20&lt;/td&gt;
&lt;td&gt;Package_TO_SOT_THT:TO-92_Inline&lt;/td&gt;
&lt;td&gt;http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Total material cost per unit is &amp;#36;6.40–&amp;#36;16.05, plus an additional &amp;#36;5.00 PCB fabrication fee form &lt;a href="https://oshpark.com/"&gt;OSHPark&lt;/a&gt; (Based on 1 in² quote). This can be reduced further with using SMD components, and a cheaper microcontroller. Not too bad for a few hours of prototype work.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Was this project valuable? If you’re looking purely at dollars spent versus performance gained, a commercial fan controller might be cheaper. But the journey taught me more about microcontroller, power electronics, and firmware design than any off-the-shelf unit could. The satisfaction of a custom solution, silent, temperature-aware, and built by hands—makes it worth every penny (and every line of code).&lt;/p&gt;
&lt;p&gt;Whether you embark on a similar adventure or opt for a plug-and-play controller, I hope this story inspires your next DIY challenge. Happy tinkering!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;If you found this project valuable, check out the fully open-sourced code and PCB files on &lt;a href="https://github.com/Colahall/tiny85fancontrol"&gt;GitHub&lt;/a&gt; and &lt;a href="https://codeberg.org/Colahall/tiny85fancontrol"&gt;Codeberg&lt;/a&gt;.&lt;/strong&gt; I'm planning to add new features—like advanced fan profiles and UI integration—if there’s interest. Additionally, I can develop a more cost-effective version using a cheaper microcontroller to further reduce BOM costs, so let me know if that’s something you’d like to see!&lt;/p&gt;</content><category term="Programming"></category><category term="firmware"></category><category term="hardware"></category><category term="tech"></category><category term="C"></category><category term="pwm"></category><category term="attiny85"></category><category term="fan"></category></entry><entry><title>Strange Corners of C: Entering The Twilight Zone of the C Compiler</title><link href="https://shafq.at/strange-corners-of-c.html" rel="alternate"></link><published>2025-02-10T00:00:00-05:00</published><updated>2025-02-11T00:00:00-05:00</updated><author><name>Ayan Shafqat</name></author><id>tag:shafq.at,2025-02-10:/strange-corners-of-c.html</id><summary type="html">&lt;p&gt;C is a fascinating programming language, simple enough to learn in a few days,
yet powerful enough to build the world's most complex systems. With its
lightweight runtime, C runs everywhere! From microwave ovens to spacecrafts,
and everything in between. Sometimes, I can’t help but wonder: &lt;em&gt;Is the universe …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;C is a fascinating programming language, simple enough to learn in a few days,
yet powerful enough to build the world's most complex systems. With its
lightweight runtime, C runs everywhere! From microwave ovens to spacecrafts,
and everything in between. Sometimes, I can’t help but wonder: &lt;em&gt;Is the universe
itself written in C?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For as long as I can remember, C has been my &lt;code&gt;goto&lt;/code&gt; language (see what I did
there?). I first learning C to write games for DOS (remember those &lt;code&gt;far&lt;/code&gt;
pointers?). Over the years, I have programmed in countless environment using C.
It is the language  I’d like to think I’ve mastered it. Yet, time and again, I
encounter some obscure trick or unexpected behavior that shifts my
understanding of the language.&lt;/p&gt;
&lt;h2&gt;IOCCC&lt;/h2&gt;
&lt;p&gt;One of my favorite pastimes is browsing entries from the &lt;a href="https://www.ioccc.org/"&gt;International
Obfuscated C Code Contest (IOCCC)&lt;/a&gt;. This competition
has produced some of the strangest, most brilliant C programs ever
written—programs that are deliberately hard to read, but often contain deep
insights into the language.&lt;/p&gt;
&lt;p&gt;Recently, I stumbled upon an entry from &lt;strong&gt;1984&lt;/strong&gt; by Sjoerd Mullender:
&lt;a href="https://www.ioccc.org/1984/mullender/mullender.c"&gt;mullender.c&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first glance, the code looks bizarre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;277&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;04735&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-4129&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;477&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xbef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;-113&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21119&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x52d7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1006&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-7151&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x4bc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;020004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;14880&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10541&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2056&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;04010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4548&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3044&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-6716&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;4407&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5568&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-30460&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5570&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-30419&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x7e82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0760&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;02400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;026&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x6176&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25712&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;072163&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29303&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I thought, "Hey isn't &lt;code&gt;main()&lt;/code&gt; suppose be a function?" Apparently not. By the way,
the code above will only work on a VAX-11 or a PDP-11, which I don't have access
to. I have &lt;a href="https://lainsystems.com/posts/exploring-mullender-dot-c/"&gt;read&lt;/a&gt;
that it prints "&lt;code&gt;:-)&lt;/code&gt;" across the screen until it is forced to stop.&lt;/p&gt;
&lt;h2&gt;Understanding The Trick&lt;/h2&gt;
&lt;p&gt;Instead of reproducing it, let’s break down the underlying trick. This entry
leverages the way compilers, assemblers, and linkers handle &lt;strong&gt;data vs.
executable code&lt;/strong&gt; in low-level architectures. Fun fact, the IOCCC
later &lt;a href="https://www.ioccc.org/1984/index.html"&gt;updated its rules&lt;/a&gt; to prohibit
machine-dependent code after 1984—likely due to programs like this.&lt;/p&gt;
&lt;p&gt;Like most compiled languages, C doesn’t directly produce an executable.
Instead, it undergoes multiple stages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt; → &lt;strong&gt;Compilation&lt;/strong&gt; → &lt;strong&gt;Assembly&lt;/strong&gt; → &lt;strong&gt;Linking&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each stage has a specific role:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;: Handles &lt;code&gt;#include&lt;/code&gt; files, macros, and conditional compilation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: Translates C into assembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assembly&lt;/strong&gt;: Converts assembly into machine code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linking&lt;/strong&gt;: Resolves symbols and produces an executable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inline Assembly&lt;/h3&gt;
&lt;p&gt;All basic stuff. However, compilers have evolved to add hooks into the
assembler and linker. For example, &lt;a href="https://gcc.gnu.org/"&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://clang.llvm.org/"&gt;&lt;code&gt;clang&lt;/code&gt;&lt;/a&gt; allows ways to insert inline assembly,
enabling developers to bypass the compiler’s usual code generation. It's a way
to tell the compiler, "Trust me, I know what I’m doing. Just insert this
directly into the assembly output." For example, we can write a simple program
that outputs &lt;code&gt;42&lt;/code&gt; to the shell. FYI, I run &lt;strong&gt;Arch Linux&lt;/strong&gt; on an x86-64 target,
BTW.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;asm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mov $42, %%rax&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This moves &lt;code&gt;42&lt;/code&gt; directly into the return register (&lt;code&gt;rax&lt;/code&gt; on x86-64).&lt;/p&gt;
&lt;p&gt;If we want to inspect the assembly output, we can instruct the compiler to stop
after the compilation stage using the &lt;code&gt;-S&lt;/code&gt; flag (on gcc and clang). But why not
place the inline assembly directly inside &lt;code&gt;main()&lt;/code&gt;? According to the C
standard, if &lt;code&gt;main()&lt;/code&gt; lacks an explicit &lt;code&gt;return&lt;/code&gt; statement, it implicitly
returns &lt;code&gt;0&lt;/code&gt;. This means our carefully crafted assembly code would execute, but
immediately be replaced by zero and its result wouldn't make it back to the shell.&lt;/p&gt;
&lt;p&gt;Take a look at lines &lt;strong&gt;13–17&lt;/strong&gt; (below) in the output—the compiler has inserted our
assembly code exactly as written. And don't bother trying to outsmart the
compiler’s optimization settings; at this level, you're venturing into the
territory of &lt;strong&gt;undefined behavior&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt;  &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;main-1.c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nl&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.file&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main-1.c&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.text
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.type&lt;span class="w"&gt;   &lt;/span&gt;foo,&lt;span class="w"&gt; &lt;/span&gt;@function
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;foo:
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;.LFB0:
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.cfi_startproc
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;endbr64
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;pushq&lt;span class="w"&gt;   &lt;/span&gt;%rbp
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.cfi_def_cfa_offset&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.cfi_offset&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;-16
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;movq&lt;span class="w"&gt;    &lt;/span&gt;%rsp,&lt;span class="w"&gt; &lt;/span&gt;%rbp
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.cfi_def_cfa_register&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#APP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# 1 &amp;quot;main-1.c&amp;quot; 1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;mov&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$42&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;%rax
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# 0 &amp;quot;&amp;quot; 2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#NO_APP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;nop
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;popq&lt;span class="w"&gt;    &lt;/span&gt;%rbp
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.cfi_def_cfa&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;ret
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;.cfi_endproc
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;.LFE0:
&amp;lt;snip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;"Inline Linking"&lt;/h3&gt;
&lt;p&gt;We can also bypass the assembler and go directly to the linker. But before
doing that, we need to determine the exact machine code for a simple &lt;code&gt;int
main() { return 42; }&lt;/code&gt; program. Instead of manually inspecting assembly, we can
&lt;em&gt;cheat&lt;/em&gt;  a little by using
&lt;a href="https://www.gnu.org/software/binutils/"&gt;&lt;code&gt;binutils&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt; __EOF__ | gcc -O2 -o - -x c - | objdump -S -&lt;/span&gt;
&lt;span class="s"&gt;int main() { return 42; }&lt;/span&gt;
&lt;span class="s"&gt;__EOF__&lt;/span&gt;


-:&lt;span class="w"&gt;     &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;elf64-x86-64

&amp;lt;snip&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;skipping&lt;span class="w"&gt; &lt;/span&gt;unnecessary&lt;span class="w"&gt; &lt;/span&gt;details&lt;span class="w"&gt; &lt;/span&gt;...

&lt;span class="m"&gt;0000000000001040&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;main&amp;gt;:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1040&lt;/span&gt;:&lt;span class="w"&gt;   &lt;/span&gt;f3&lt;span class="w"&gt; &lt;/span&gt;0f&lt;span class="w"&gt; &lt;/span&gt;1e&lt;span class="w"&gt; &lt;/span&gt;fa&lt;span class="w"&gt;             &lt;/span&gt;endbr64
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1044&lt;/span&gt;:&lt;span class="w"&gt;   &lt;/span&gt;b8&lt;span class="w"&gt; &lt;/span&gt;2a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;mov&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;x2a,%eax
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1049&lt;/span&gt;:&lt;span class="w"&gt;   &lt;/span&gt;c3&lt;span class="w"&gt;                      &lt;/span&gt;ret
&lt;span class="w"&gt;    &lt;/span&gt;104a:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;66&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;0f&lt;span class="w"&gt; &lt;/span&gt;1f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;44&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;nopw&lt;span class="w"&gt;   &lt;/span&gt;0x0&lt;span class="o"&gt;(&lt;/span&gt;%rax,%rax,1&lt;span class="o"&gt;)&lt;/span&gt;

&amp;lt;snip&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;skipping&lt;span class="w"&gt; &lt;/span&gt;unnecessary&lt;span class="w"&gt; &lt;/span&gt;details&lt;span class="w"&gt; &lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can ignore &lt;code&gt;endbr64&lt;/code&gt;, as it's not relevant for what we want to do. I also
don't know why it's there (&lt;a href="https://stackoverflow.com/a/69226244/6744189"&gt;&lt;em&gt;something something security, I guess&lt;/em&gt;&lt;/a&gt;). The essential machine code for
&lt;code&gt;return 42;&lt;/code&gt; is simply moving &lt;code&gt;42&lt;/code&gt; (&lt;code&gt;0x2a&lt;/code&gt;) into the &lt;code&gt;EAX&lt;/code&gt; register, followed
by a &lt;code&gt;ret&lt;/code&gt; instruction. &lt;/p&gt;
&lt;p&gt;Additionally, we can disregard the remaining instructions, as they are inserted
for alignment purposes. As of this writing, the Linux kernel does not enforce
function boundary alignment, making them unnecessary for our purposes. &lt;/p&gt;
&lt;p&gt;This leaves us with the following minimal machine code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xb8\x2a\0\0\0\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* mov $0x2a, %eax */&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xc3&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="cm"&gt;/* ret */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's try executing our handcrafted machine code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt; __EOF__ | gcc -x c - &amp;amp;&amp;amp; ./a.out; echo $?&lt;/span&gt;
&lt;span class="s"&gt;const char main[] = &amp;quot;\xb8\x2a\0\0\0\0&amp;quot; &amp;quot;\xc3&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;__EOF__&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;119959&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;segmentation&lt;span class="w"&gt; &lt;/span&gt;fault&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;core&lt;span class="w"&gt; &lt;/span&gt;dumped&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;./a.out
&lt;span class="m"&gt;139&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait... what? It compiled just fine, but &lt;em&gt;why&lt;/em&gt; did it crash with a segmentation fault?  &lt;/p&gt;
&lt;p&gt;Well, at least we have "segments" to "fault" on... right, embedded devs?  &lt;/p&gt;
&lt;p&gt;The issue is that the linker, by default, places &lt;code&gt;const char main[]&lt;/code&gt; in the
&lt;strong&gt;&lt;code&gt;.rodata&lt;/code&gt;&lt;/strong&gt; (read-only data) section of memory. This section is marked as
&lt;strong&gt;non-executable&lt;/strong&gt; by the Linux kernel’s memory protection mechanisms. So, when
the program tries to execute code stored there, &lt;strong&gt;Linux sees this as a
segmentation violation and immediately kills the process&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;We can instruct the linker to place our machine code in the &lt;strong&gt;executable code
section&lt;/strong&gt; instead of &lt;code&gt;.rodata&lt;/code&gt;. On Linux, this means placing it in the &lt;code&gt;.text&lt;/code&gt;
segment, which is designated for executable instructions. We can achieve this
directly in the compiler using the &lt;code&gt;__attribute__&lt;/code&gt; keyword, available in both
&lt;strong&gt;GCC&lt;/strong&gt; and &lt;strong&gt;Clang&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt; __EOF__ | gcc -x c - &amp;amp;&amp;amp; ./a.out; echo $?&lt;/span&gt;
&lt;span class="s"&gt;__attribute__((section(&amp;quot;.text&amp;quot;)))&lt;/span&gt;
&lt;span class="s"&gt;const char main[] = &amp;quot;\xb8\x2a\0\0\0\0&amp;quot; &amp;quot;\xc3&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;__EOF__&lt;/span&gt;

/tmp/ccvXEHQs.s:&lt;span class="w"&gt; &lt;/span&gt;Assembler&lt;span class="w"&gt; &lt;/span&gt;messages:
/tmp/ccvXEHQs.s:4:&lt;span class="w"&gt; &lt;/span&gt;Warning:&lt;span class="w"&gt; &lt;/span&gt;ignoring&lt;span class="w"&gt; &lt;/span&gt;changed&lt;span class="w"&gt; &lt;/span&gt;section&lt;span class="w"&gt; &lt;/span&gt;attributes&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.text
&lt;span class="m"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hey, there's our hand-crafted &lt;strong&gt;42&lt;/strong&gt;! 🎉  &lt;/p&gt;
&lt;p&gt;Despite the compiler warning about changing section attributes, the execution
works because we successfully placed our custom machine code in an executable
memory section. &lt;/p&gt;
&lt;h2&gt;More Abusive C&lt;/h2&gt;
&lt;p&gt;With this trick, we can do all sorts of things. For instance, here’s a
“function” that isn’t visible outside its scope—essentially a primitive,
hardcoded &lt;strong&gt;lambda&lt;/strong&gt; in machine code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;func_impl&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8d\x04\x37\xc3&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;func_impl&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this approach comes with several limitations. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;strong&gt;can’t&lt;/strong&gt; call other C functions because we’d need their exact memory
  addresses.&lt;/li&gt;
&lt;li&gt;We &lt;strong&gt;can’t&lt;/strong&gt; access stack memory, so all variables must be stored in
  registers.&lt;/li&gt;
&lt;li&gt;We &lt;strong&gt;could&lt;/strong&gt; have variables, but they’d effectively behave like &lt;code&gt;static&lt;/code&gt;
  variables, meaning &lt;strong&gt;no thread safety&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, these restrictions won’t stop me from writing a &lt;code&gt;"Hello, World\n"&lt;/code&gt;
program using raw machine code. (Oh, and yes, I use &lt;strong&gt;Arch Linux&lt;/strong&gt; on x86-64,
BTW. 😏)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* mov eax, 1    */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xb8\x01\0\0\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* mov edi, 1    */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xbf\x01\0\0\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* lea rsi, [rip+0xa]  (64-bit!) */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x48\x8d\x35\x0a\0\0\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* mov edx, 0x13 */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xba\x13\0\0\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* syscall       */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x0f\x05&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* xor eax,eax   */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x31\xc0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* ret           */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xc3&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* UTF-8 💩 + space + &amp;quot;Hello, world!\n&amp;quot; = 19 bytes total */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xf0\x9f\x92\xa9&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Who says main() has to be a function?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because why not include a hand-crafted &lt;strong&gt;poop emoji 💩&lt;/strong&gt; in our binary as well? 🥳&lt;/p&gt;
&lt;h3&gt;But Wait! There's More! 🔥&lt;/h3&gt;
&lt;p&gt;We can take things even further by adding some &lt;em&gt;"security"&lt;/em&gt; and a &lt;strong&gt;factory
pattern&lt;/strong&gt; to our madness. (Isn’t it nice? 🤓)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun_impl&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8e&lt;/span&gt;&lt;span class="s"&gt;GlsbVdoZEV3cGw=&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2xhZEkgQ2FuIEg=&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8d\x04\x37\xc3&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ZWxwIHlvdSBvdXQ=&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;VGhpcyBpcyBBU0N=&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SUkgQXJ0ISAgICA=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fun_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun_factory_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ADD_FUNCTION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;NOT_IMPLEMENTED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;INVALID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;fun_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fun_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;license_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;ADD_FUNCTION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun_impl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ADD_FUNCTION&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;license_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;fun_impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define OUR_LICENSE_KEY (0xAE)&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;fun_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add_fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fun_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADD_FUNCTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OUR_LICENSE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;What’s Happening Here?&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We've &lt;strong&gt;embedded obfuscated data&lt;/strong&gt; (a mix of actual machine code and encoded
  gibberish) in a static text section.&lt;/li&gt;
&lt;li&gt;Instead of directly exposing our "add function," we &lt;strong&gt;use a factory
  function&lt;/strong&gt; that requires a &lt;strong&gt;license key&lt;/strong&gt; to retrieve it.&lt;/li&gt;
&lt;li&gt;The license key is used to &lt;strong&gt;XOR&lt;/strong&gt; the function offset, adding a basic layer
  of obfuscation (though let’s be honest, a decent debugger will expose this
  instantly).&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;main()&lt;/code&gt; function calls the &lt;strong&gt;fun factory&lt;/strong&gt;, retrieves the function
  pointer, and executes it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &lt;em&gt;almost&lt;/em&gt; looks like a &lt;strong&gt;primitive software licensing mechanism&lt;/strong&gt;, right?
(Totally not a sketchy DRM system. 🙃)&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Is It Secure?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Absolutely not. 🔥&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The obfuscation is &lt;strong&gt;weak&lt;/strong&gt; and easy to reverse-engineer.&lt;/li&gt;
&lt;li&gt;XOR-based security is &lt;strong&gt;laughably&lt;/strong&gt; easy to crack.&lt;/li&gt;
&lt;li&gt;Since function pointers are directly manipulated, this could easily lead to
  &lt;strong&gt;unexpected behavior or crashes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But hey, it’s fun to pretend we’re doing &lt;strong&gt;serious security engineering&lt;/strong&gt; while
writing machine code inside a C string. 😆&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think we have played for long enough. But, what's the point? Are these ever
used in the wild? Some embedded targets will have common functions programmed
into the ROM while fabrication. And, there are two ways to resolve the function
address, write a linker script, or do this gross thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/* vendor_specific_function.c */&lt;/span&gt;
&lt;span class="cp"&gt;#define SOME_ROM_ADDRESS (0xBADCODE)&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;vendor_spefic_function&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SOME_ROM_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope you had fun exploring some of the strange corners of the C programming
language. We’ve seen how C lets you bypass almost every safety mechanism, write
self-modifying code, and even mess with memory in ways that feel like cheating.&lt;/p&gt;
&lt;p&gt;But as always, with great power comes greater segmentation faults—if your
environment even has segments to fault on, right?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Discuss on &lt;a href="https://news.ycombinator.com/item?id=43008480"&gt;Hacker News&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="techonology"></category><category term="C"></category><category term="compiler"></category><category term="linker"></category></entry><entry><title>Float to Q1.15: A FizzBuzz for Audio Technical Interview</title><link href="https://shafq.at/fizzbuzz-for-audio.html" rel="alternate"></link><published>2025-01-19T00:00:00-05:00</published><updated>2025-01-19T00:00:00-05:00</updated><author><name>Ayan Shafqat</name></author><id>tag:shafq.at,2025-01-19:/fizzbuzz-for-audio.html</id><summary type="html">&lt;p&gt;An easy-sounding “Float to &lt;code&gt;Q1.15&lt;/code&gt;” challenge is proposed as an audio FizzBuzz interview question.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don’t enjoy watching candidates squirm through tricky interviews any more
than anyone else does. Let’s face it: a job interview is stressful enough! Being
judged on every syllable over a video call (or in a room) isn’t exactly fun.
And if I’m the interviewer, I’m also under pressure to complete my own work on
top of conducting the interview.&lt;/p&gt;
&lt;p&gt;It’s counterproductive to throw overly difficult questions at candidates just
to see them fail. Instead, I like straightforward “benchmark” questions—much
like &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt;. FizzBuzz is trivial
to solve in under five minutes, but it still offers a ton of room for
improvement and optimization. Don’t believe me? Check out the &lt;a href="https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz/"&gt;High throughput
FizzBuzz&lt;/a&gt;
code golf page, where some solutions run nearly as fast as
&lt;a href="https://www.man7.org/linux/man-pages/man3/memcpy.3.html"&gt;&lt;code&gt;memcpy(3)&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I wanted a similar litmus test for hiring audio programming candidates, and I
think I may have found it. Let’s dive into the “Float to Q1.15” challenge: The
&lt;em&gt;FizzBuzz&lt;/em&gt; of audio programming:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt; Convert an array of 32-bit floating-point audio samples into 16-bit
fixed-point format (&lt;code&gt;Q1.15&lt;/code&gt;). Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Input Range:&lt;/strong&gt; Any valid &lt;code&gt;float32&lt;/code&gt; value (i.e., the entire representable
   range of single-precision floats).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output Range:&lt;/strong&gt; Scale, round, and clamp so that &lt;code&gt;[-1.0, +1.0)&lt;/code&gt; in
   floating-point maps to &lt;code&gt;[-32768, +32767)&lt;/code&gt; in &lt;code&gt;int16_t&lt;/code&gt;. Any values below
   &lt;code&gt;-1.0&lt;/code&gt; should clamp to &lt;code&gt;-32768&lt;/code&gt;, and any values above &lt;code&gt;+1.0&lt;/code&gt; should clamp to
   &lt;code&gt;+32767&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A suitable function prototype might be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;float_to_q1x15&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, I will also give a possible answer as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;float_to_q1x15&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int16_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p15F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* Scale by 2**15 */&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* Clamp */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INT16_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INT16_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INT16_MIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INT16_MIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int16_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* Convert to int16_t */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Easy, right?&lt;/strong&gt; But this is just the start. FizzBuzz is also easy—until it’s
not. Let’s expand on the requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if the input is 0.5? What output do we get?&lt;/li&gt;
&lt;li&gt;What if the input is 0.50001 or 0.49995? How do we handle rounding?&lt;/li&gt;
&lt;li&gt;Are we applying simple truncation, or do we need a specific rounding method
  (e.g., round half up, round half to even, or
  &lt;a href="https://en.wikipedia.org/wiki/Dither"&gt;dither&lt;/a&gt;)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we’re dipping our toes into DSP theory and the quirks of floating-point
arithmetic. Floats are straightforward to use in code but notoriously tricky to
get fully “correct.” It’s not uncommon to encounter a mysterious &lt;code&gt;NaN&lt;/code&gt; that
sneaks into your audio pipeline because of a filter that’s been pushed just a
bit too far. From my experience as an audio software engineer, I can tell you
that &lt;code&gt;NaNs&lt;/code&gt; are like nuclear bombs for an audio pipeline, and no amount of
&lt;code&gt;-ffast-math&lt;/code&gt; will save you from the fallout.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Questions to consider next:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given &lt;code&gt;[-1, +1)&lt;/code&gt; as your input range, how many bits of precision do you truly
  have in &lt;code&gt;float32&lt;/code&gt; representation?&lt;/li&gt;
&lt;li&gt;Should you always round your scaled output, or is truncation acceptable?&lt;/li&gt;
&lt;li&gt;If rounding, which method is best for audio signals?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By exploring these nuances, you can quickly spot which candidates have hands-on
DSP experience—and which ones haven’t battled those late-night &lt;code&gt;NaN&lt;/code&gt; bugs
(yet). This is exactly why I like to call this “the FizzBuzz of audio
programming.” It starts simple but reveals deeper topics lurking just below the
surface. Plus, I think it's a fun way to continue a conversation!&lt;/p&gt;</content><category term="Programming"></category><category term="fizzbuzz"></category><category term="interview"></category><category term="tech"></category><category term="C"></category><category term="C++"></category></entry></feed>